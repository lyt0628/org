:PROPERTIES:
:ID:       6aa8d5ad-6e01-4996-bbfd-c2633518d2ca
:END:
#+title: pyqt-widget-button
#+date: [2024-08-07 三]
#+last_modified:  


* 创建 Button 
#+BEGIN_SRC python 
  <<pyqt>>

  class MainWindow(QMainWindow):
    def __init__(self):
      super().__init__()
      self.setWindowTitle("My App")

      btn = QPushButton("Press Me")

      self.setCentralWidget(btn)

  app = QApplication([])

  window = MainWindow()
  window.show()

  app.exec()
#+END_SRC


* Clicked 信号

#+begin_src python
  import sys

  <<pyqt>>

  
  class CircleCal(QDialog):
      def __init__(self):
	  super().__init__()
	  self.initUi()

      def initUi(self):
	  QLabel('半径=', self).setGeometry(80, 40, 71, 21)
	  self.leRadius = QLineEdit(self)
	  self.leRadius.setGeometry(140, 40, 113, 21)
	  self.leRadius.returnPressed.connect(self.calCircle)

	  QLabel('周长=', self).setGeometry(80, 80, 71, 21)
	  self.leLength = QLineEdit(self)
	  self.leLength.setGeometry(140, 80, 113, 21)
	  self.leLength.setEnabled(False)

	  QLabel('面积=', self).setGeometry(80, 120, 71, 21)
	  self.leArea = QLineEdit(self)
	  self.leArea.setGeometry(140, 120, 113, 21)
	  self.leArea.setEnabled(False)

	  self.pbCal = QPushButton('计 算', self)
	  self.pbCal.setGeometry(140, 160, 93, 28)
	  self.pbCal.clicked.connect(self.calCircle)        

	  self.resize(350, 200)
	  self.move(300, 300)
	  self.setWindowTitle('计算圆面积')

      def calCircle(self):
	  r = int(self.leRadius.text())
	  if r >= 0:
	      length = 2 * 3.14159 * r
	      area = 3.14159 * r * r
	      self.leLength.setText(str(length))
	      self.leArea.setText(str(area))

  if __name__ == '__main__':
      app = QApplication(sys.argv)
      dlg = CircleCal()
      dlg.show()
      sys.exit(app.exec())
#+end_src




* 图片，事件，enable

#+begin_src python
  import sys
  <<pyqt>>

  class MyDialog(QDialog):
	  def __init__(self, parent=None):
		  super(MyDialog, self).__init__(parent)
		  self.setWindowTitle("QPushButton测试")
		  self.btn1 = QPushButton("文本按钮")
		  self.btn1.setCheckable(True)
		  self.btn1.toggle()
		  self.btn1.clicked.connect(lambda:self.btnText(self.btn1))
		  self.btn2 = QPushButton('图片按钮')
		  self.btn2.setIcon(QIcon(QPixmap("images/python.ico")))
		  self.btn2.clicked.connect(lambda:self.btnText(self.btn2))
		  self.btn3 = QPushButton ("&Change")
		  self.btn3.setDefault(True)
		  self.btn3.clicked.connect(self.btnChange)
		  self.btn3.clicked.connect(lambda:self.btnText(self.btn3))
		  vlayout = QVBoxLayout()
		  vlayout.addWidget(self.btn1)
		  vlayout.addWidget(self.btn2)
		  vlayout.addWidget(self.btn3)
		  self.setLayout(vlayout)

	  def btnChange(self):
		  if self.btn1.isChecked():
			  print("文本按钮选择")
		  else:
			  print("文本按钮释放")
		  if self.btn2.isEnabled():
			  self.btn2.setEnabled(False)
		  else:
			  self.btn2.setEnabled(True)
	  def btnText(self, btn):
		  print("单击"+btn.text()+"！")
  if __name__ =='__main__':
	  app = QApplication(sys.argv)
	  d = MyDialog()
	  d.show()
	  sys.exit(app.exec())
#+end_src


