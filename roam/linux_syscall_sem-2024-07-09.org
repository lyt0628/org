:PROPERTIES:
:ID:       1dfcf410-c3a2-4169-8650-23dd4ad051fb
:END:
#+title: linux-syscall-sem<thrd>
#+date: [2024-07-09 二]
#+last_modified: [2024-07-09 二 17:38]



#+NAME: work
#+BEGIN_SRC C
  void* thread_function(void* arg);
  sem_t bin_sem;
  #define WORK_SIZE 1024
  char work_area[WORK_SIZE];

#+END_SRC 



#+BEGIN_SRC C :tangle ./tmp/usp/pcsem.c

  <<mystdc>>
  <<work>>
  int main(){
    pthread_t a_thread;
    void* thread_res;

    Sem_init(&bin_sem, 0, 0);

    Pthread_create(&a_thread, NULL, thread_function, NULL);

    while(strncmp("end", work_area, 3) !=0){
       Fgets(work_area, WORK_SIZE, stdin);
       sem_post(&bin_sem);
     }
     thread_join(a_thread, &thread_res);
     sem_destroy(&bin_sem);
     exit(EXIT_SUCCESS);
   }

  void* thread_function(void *arg){
    sem_wait(&bin_sem);
    while(strncmp("end", work_area, 3) != 0){
      printf("inputing");
      sem_wait(&bin_sem);
    }
    pthread_exit(NULL);
  }

#+END_SRC


#+BEGIN_SRC C :tangle ./tmp/usp/pcsemv2.c
     <<unix>>

     <<work>>
     int main(){
       int ret;
       pthread_t a_thread;
       void* thread_res;

       Sem_init(&bin_sem, 0, 0);

       Pthread_create(&a_thread, NULL, thread_function, NULL);

       while(strncmp("end", work_area, 3) !=0){
         if(strncmp(work_area, "FAST", 4) ==0){
	   sem_post(&bin_sem);
	   strcpy(work_area,"weeee...");
         }else{
	   fgets(work_area, WORK_SIZE, stdin);
         }
	 sem_post(&bin_sem);
       }
       Pthread_join(a_thread, &thread_res);

       sem_destroy(&bin_sem);
       exit(EXIT_SUCCESS);
     }

     void* thread_function(void *arg){
       sem_wait(&bin_sem);
       while(strncmp("end", work_area, 3) != 0){
         printf("inputing");
         sem_wait(&bin_sem);
       }
       pthread_exit(NULL);
    }
#+END_SRC






