:PROPERTIES:
:ID:       9bf56f7d-b089-4de7-accc-fdce116efb69
:END:
#+title: cpp-lib-boost-Optional
#+date: [2024-05-28 二]
#+last_modified: [2024-07-05 五 11:50]

*  作用
用于给可选的，可空的这种值进行封装. 用来替代空指针，防止空指针异常.

* 官方示例 可选的配置参数
读取配置文件中，可选的参数 maxvalue
- Optional 包含空时可以被视为 0, 这是 Boost定义的常量 boost::none
   
#+BEGIN_SRC C++
#include <boost/optional.hpp>

boost::optional<int> getConfigParam(std::string name);  // return either an int or a `not-an-int`

int main()
{
  if (boost::optional<int> oi = getConfigParam("MaxValue")) // did I get a real int?
    runWithMax(*oi);                                        // use my int
  else
    runWithNoMax();
}
#+END_SRC



* 官方示例2 可选的函数返回类型
实现一个 std::string 2 int 的 Converter 类.
- optional 重载了 *， 用于返回包含值.
- 这用于包含类型确定的 optional. 是一个 ndefined behaviour (UB).
  bootst 使用 BOOST_ASSERT 保护， 会不会产生编译时错误？
  #+BEGIN_SRC C++
    int i = *convert("100");
  #+END_SRC
- 可以用异常机制来保护 提取包含值操作
  #+BEGIN_SRC C++
    try {
      int j = convert(text).value();
    }
    catch (const boost::bad_optional_access&) {
      // deal with it
    }
  #+END_SRC

- 提供默认值
  #+BEGIN_SRC C++
    int k = convert(text).value_or(0);
  #+END_SRC

- 失败回调
  和异常机制比起来，哪个更优秀
  #+BEGIN_SRC C++
int fallback_to_default()
{
  cerr << "could not convert; using -1 instead" << endl;
  return -1;
}

int l = convert(text).value_or_eval(fallback_to_default);
#+END_SRC


- 实现
  - 自动转型
    optional实现了 T->optional 的构造.
    上面可以用 none 的 optional 来进行逻辑操作，意思是 optional 重载了 == 吗？
  #+BEGIN_SRC C++
    boost::optional<int> convert(const std::string& text)
    {
      std::stringstream s(text);
      int i;
      if ((s >> i) && s.get() == std::char_traits<char>::eof())
	return i;
      else
	return boost::none;
    }
  #+END_SRC



*  optional 实现了拷贝构造
#+BEGIN_SRC C++
  boost::optional<int> convert(const std::string& text)
  {
    boost::optional<int> ans;
    std::stringstream s(text);
    int i;
    if ((s >> i) && s.get() == std::char_traits<char>::eof())
      ans = i;

    return ans;
  }
#+END_SRC


* 懒加载机制
- emplace 函数会将参数传递给包含类型的构造函数来初始化包含值
  不支持拷贝构造
  
#+BEGIN_SRC C++
class Widget
{
  mutable boost::optional<const Resource> resource_;

public:
  Widget() {}

  const Resource& getResource() const // not thread-safe
  {
    if (resource_ == boost::none)
        resource_.emplace("resource", "arguments");

    return *resource_;
  }
};
#+END_SRC


* 


* 
