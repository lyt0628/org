:PROPERTIES:
:ID:       2a491988-3b15-453b-924b-6a1103fa2e8f
:header-args:C++: :noweb yes 
:END:
#+title: cncr
#+date: [2024-05-17 五]
#+last_modified: [2024-07-03 三 19:50]

| Function | Note |
|----------+------|
|          |      |

* Create A New Thread

** Using Thread Class
#+begin_src C++ :
  <<cpp>>
  <<cpp-hello>>
  
  int main()
  {
      std::thread t(hello);
      t.join();
  }
#+end_src

#+RESULTS:
: Hello C++ World

** 将Callable 类作为线程入口

#+NAME: callable 
#+begin_src C++
  <<cpp-print_hello>>

  class callable
  {
  public:

  void operator()() const
  {
    print_hello();
  }

  };
#+end_src

#+RESULTS: callable

#+begin_src C++
  <<mycpp>>
  <<callable>>

  int main()
  {
    callable f;

    std::thread my_thread(f);
    my_thread.join();
    cout << my_thread.joinable() <<" means False";
  }
#+end_src

#+RESULTS:
| Hello | C++   | World |
|     0 | means | False |


** 分离线程(detach)
#+BEGIN_SRC C++
  <<mycpp>>

  void do_something(int& i)
  {
      ++i;
  }

  struct func
  {
      int& i;

      func(int& i_):i(i_){}

      void operator()()
      {
	  for(unsigned j=0;j<1000000;++j)
	  {
	      do_something(i);
              cout << i << endl;
	  }
      }
  };


  void oops()
  {
      int some_local_state=0;
      func my_func(some_local_state);

      std::thread my_thread(my_func);
      my_thread.detach();

      cout << my_func.i;
  }

  int main()
  {
      oops();
  }
  #+END_SRC

  #+RESULTS:
  : 0


** 在异常执行流中仍然要保持join()

#+begin_src C++
  #include <thread>

  void do_something(int& i)
  {
      ++i;
  }

  struct func
  {
      int& i;

      func(int& i_):i(i_){}

      void operator()()
      {
	  for(unsigned j=0;j<1000000;++j)
	  {
	      do_something(i);
	  }
      }
  };

  void do_something_in_current_thread()
  {}

  void f()
  {
      int some_local_state=0;
      func my_func(some_local_state);

      std::thread t(my_func);
      try
      {
	  do_something_in_current_thread();
      }
      catch(...)
      {
	  t.join();
	  throw;
      }
      t.join();
  }

  int main()
  {
      f();
  }
 #+end_src

 #+RESULTS:

* 资源获取即初始化(线程防御类)

 #+begin_src C++
   <<mycpp>>

   class thread_guard
   {
       std::thread& t;
   public:
       explicit thread_guard(std::thread& t_):
	   t(t_)
       {}
       ~thread_guard()
       {
	   if(t.joinable())
	   {
	       t.join();
	   }
       }
       thread_guard(thread_guard const&)=delete;
       thread_guard& operator=(thread_guard const&)=delete;
   };

   void do_something(int& i)
   {
       ++i;
   }

   struct func
   {
       int& i;

       func(int& i_):i(i_){}

       void operator()()
       {
	   for(unsigned j=0;j<1000000;++j)
	   {
	       do_something(i);
	   }
       }
   };

   void do_something_in_current_thread()
   {}


   void f()
   {
       int some_local_state;
       func my_func(some_local_state);
       std::thread t(my_func);
       thread_guard g(t);
        
       do_something_in_current_thread();
   }

   int main()
   {
       f();
   }  
 #+end_src

 #+RESULTS:




#+begin_src C++
  <<mycpp>>

  void open_document_and_display_gui(std::string const& filename)
  {}

  bool done_editing()
  {
      return true;
  }

  enum command_type{
      open_new_document
  };


  struct user_command
  {
      command_type type;

      user_command():
	  type(open_new_document)
      {}
  };

  user_command get_user_input()
  {
      return user_command();
  }

  std::string get_filename_from_user()
  {
      return "foo.doc";
  }

  void process_user_input(user_command const& cmd)
  {}

  void edit_document(std::string const& filename)
  {
      open_document_and_display_gui(filename);
      while(!done_editing())
      {
	  user_command cmd=get_user_input();
	  if(cmd.type==open_new_document)
	  {
	      std::string const new_name=get_filename_from_user();
	      std::thread t(edit_document,new_name);
	      t.detach();
	  }
	  else
	  {
	      process_user_input(cmd);
	  }
      }
  }

  int main()
  {
      edit_document("bar.doc");
  }
 #+end_src

 #+RESULTS:



 
#+begin_src C++
#include <thread>

void some_function()
{}

void some_other_function(int)
{}

std::thread f()
{
    void some_function();
    return std::thread(some_function);
}
std::thread g()
{
    void some_other_function(int);
    std::thread t(some_other_function,42);
    return t;
}

int main()
{
    std::thread t1=f();
    t1.join();
    std::thread t2=g();
    t2.join();
}
 #+end_src

 #+RESULTS:




#+begin_src C++

  #include <thread>
  #include <utility>

  class scoped_thread
  {
      std::thread t;
  public:
      explicit scoped_thread(std::thread t_):
	  t(std::move(t_))
      {
	  if(!t.joinable());
	     // throw std::logic_error("No thread");
      }
      ~scoped_thread()
      {
	  t.join();
      }
      scoped_thread(scoped_thread const&)=delete;
      scoped_thread& operator=(scoped_thread const&)=delete;
  };

  void do_something(int& i)
  {
      ++i;
  }

  struct func
  {
      int& i;

      func(int& i_):i(i_){}

      void operator()()
      {
	  for(unsigned j=0;j<1000000;++j)
	  {
	      do_something(i);
	  }
      }
  };

  void do_something_in_current_thread()
  {}

  void f()
  {
      int some_local_state;
      scoped_thread t(std::thread(func(some_local_state)));
        
      do_something_in_current_thread();
  }

  int main()
  {
      f();
  }
 #+end_src

 #+RESULTS:




#+begin_src C++
#include <vector>
#include <thread>
#include <algorithm>
#include <functional>

void do_work(unsigned id)
{}

void f()
{
    std::vector<std::thread> threads;
    for(unsigned i=0;i<20;++i)
    {
        threads.push_back(std::thread(do_work,i));
    }
    std::for_each(threads.begin(),threads.end(),
        std::mem_fn(&std::thread::join));
}

int main()
{
    f();
}
 #+end_src

 #+RESULTS:




#+begin_src C++
#include <thread>
#include <numeric>
#include <algorithm>
#include <functional>
#include <vector>
#include <iostream>

template<typename Iterator,typename T>
struct accumulate_block
{
    void operator()(Iterator first,Iterator last,T& result)
    {
        result=std::accumulate(first,last,result);
    }
};

template<typename Iterator,typename T>
T parallel_accumulate(Iterator first,Iterator last,T init)
{
    unsigned long const length=std::distance(first,last);

    if(!length)
        return init;

    unsigned long const min_per_thread=25;
    unsigned long const max_threads=
        (length+min_per_thread-1)/min_per_thread;

    unsigned long const hardware_threads=
        std::thread::hardware_concurrency();

    unsigned long const num_threads=
        std::min(hardware_threads!=0?hardware_threads:2,max_threads);

    unsigned long const block_size=length/num_threads;

    std::vector<T> results(num_threads);
    std::vector<std::thread>  threads(num_threads-1);

    Iterator block_start=first;
    for(unsigned long i=0;i<(num_threads-1);++i)
    {
        Iterator block_end=block_start;
        std::advance(block_end,block_size);
        threads[i]=std::thread(
            accumulate_block<Iterator,T>(),
            block_start,block_end,std::ref(results[i]));
        block_start=block_end;
    }
    accumulate_block<Iterator,T>()(block_start,last,results[num_threads-1]);
    
    std::for_each(threads.begin(),threads.end(),
        std::mem_fn(&std::thread::join));

    return std::accumulate(results.begin(),results.end(),init);
}

int main()
{
    std::vector<int> vi;
    for(int i=0;i<10;++i)
    {
        vi.push_back(10);
    }
    int sum=parallel_accumulate(vi.begin(),vi.end(),5);
    std::cout<<"sum="<<sum<<std::endl;
}
 #+end_src

 #+RESULTS:
 : sum=105
