:PROPERTIES:
:ID:       e3d5b610-20ca-467e-8108-877ec6551c61
:END:
#+title: redis-command
#+date: [2024-05-25 六]
#+last_modified: [2024-07-11 四 22:15]

* Manage Command 
** boot
#+HEADER: :var cfg="/home/lyt0628/soft/redis/my_redis_cfg.conf"
#+begin_src sh 
   redis-server $cfg
#+end_src


** shutdown


** benchmark text
#+begin_src sh
  redis-benchmark
#+end_src




* DB Command

** select

#+HEADER: :var db = "16"
#+begin_src sh
 echo select $db  | redis-cli
#+end_src

#+RESULTS:
: ERR DB index is out of range


** dbsize

#+HEADER: :var db = "16"
#+begin_src sh
 echo dbsize   | redis-cli
#+end_src

#+RESULTS:
: 0


** flushdb :del db

#+HEADER: :var db = "16"
#+begin_src sh
 echo flushdb   | redis-cli
#+end_src

#+RESULTS:
: OK



** flushall :del all db

#+HEADER: :var db = "16"
#+begin_src sh
 echo flushall   | redis-cli
#+end_src

#+RESULTS:
: OK






* General

** keys
#+begin_src sh
  echo keys * | redis-cli
#+end_src

** exists
#+HEADER: :var k = "a_key"
#+begin_src sh
 echo exists $k | redis-cli
#+end_src

** del

#+HEADER: :var k = "a_key"
#+begin_src sh
 echo del $k | redis-cli
#+end_src

#+RESULTS:
: 1

** expire

#+HEADER: :var k = "a_key"
#+begin_src sh
 echo expire $k  10 | redis-cli
#+end_src

#+RESULTS:
: 1



** TTL
#+HEADER: :var k = "a_key"
#+begin_src sh
 echo ttl $k  | redis-cli
#+end_src

#+RESULTS:
: -2

| -1 |  never|
| -2 | aleady |



** tpye
#+HEADER: :var k = "a_key"
#+begin_src sh
 echo type $k | redis-cli
#+end_src

** unlink :delete-nonblock

#+HEADER: :var k = "a_key"
#+begin_src sh
 echo unlink $k | redis-cli
#+end_src

#+RESULTS:
: 1



* Atom command

** mset
#+HEADER: :var KVs = "a_key a_value another_key another_value 3k 3v"
#+begin_src sh
  echo mset $KVs | redis-cli 
#+end_src

#+RESULTS:
: OK


** mget
#+HEADER: :var Ks = "a_key  another_key  3k "
#+begin_src sh
  echo mget $Ks | redis-cli 
#+end_src

#+RESULTS:
| a_value       |
| another_value |
| 3v            |


** msetnx
#+HEADER: :var KVs = "a_key a_value another_key another_value 3k 3v 4k 4v"
#+begin_src sh
  echo msetnx $KVs | redis-cli 
#+end_src

#+RESULTS:
: 0


** setex
#+HEADER: :var k = "a_key"
#+HEADER: :var v = "a_key"
#+HEADER: :var expire = "10"
#+begin_src sh
  echo getset $k $expire $v  | redis-cli 
#+end_src



** getset
#+HEADER: :var k = "a_key"
#+HEADER: :var new = "10"
#+begin_src sh
  echo getset $k $new  | redis-cli 
#+end_src


* Str Command

** set 
#+HEADER: :var k = "a_key"
#+HEADER: :var v = "a_value1"
#+begin_src sh
  echo set $k $v | redis-cli 
#+end_src

#+RESULTS:
: OK

** get
#+NAME: get
#+HEADER: :var k = "a_key"
#+begin_src sh
  echo get $k | redis-cli 
#+end_src

#+RESULTS: get
: a_value1

#+RESULTS:
: 10


** append

#+HEADER: :var k = "a_key"
#+HEADER: :var a = "append_value"
#+begin_src sh
  echo append $k $a | redis-cli 
#+end_src

#+RESULTS:
: 20


** setnx
#+HEADER: :var k = "a_key"
#+HEADER: :var v = "a_default_value"
#+begin_src sh
  echo setnx $k $v | redis-cli 
#+end_src

#+RESULTS:
: 1

** getrange
#+HEADER: :var k = "a_key"
#+begin_src sh
  echo getrange $k 0 3 | redis-cli 
#+end_src

#+RESULTS:
: a_va




** setrange
#+HEADER: :var k = "a_key"
#+HEADER: :var start = "0"
#+HEADER: :var newval = "newv"
#+begin_src sh
  echo setrange $k $start   $newval  | redis-cli 
#+end_src

#+RESULTS:
: 7


** setrange with expire
#+HEADER: :var k = "a_key"
#+HEADER: :var v = "a_key"
#+HEADER: :var expire = "10"
#+begin_src sh
  echo setex $k $expire  $v  | redis-cli 
#+end_src

#+RESULTS:
: OK




* Num Command

** inc
#+HEADER: :var k = "a_num"
#+begin_src sh
  echo inc $k | redis-cli 
#+end_src

#+RESULTS:
| ERR unknown command 'inc' | with args beginning with: 'a_num' |

** decr
#+HEADER: :var k = "a_num"
#+begin_src sh
  echo decr $k | redis-cli 
#+end_src



** incby
#+HEADER: :var k = "a_num"
#+HEADER: :var step =3
#+begin_src sh
  echo incby $k $step  | redis-cli 
#+end_src

** decrby
#+HEADER: :var k = "a_num"
#+HEADER: :var step =3
#+begin_src sh
  echo decrby $k $step   | redis-cli 
#+end_src



* list operator
** lpush
#+HEADER: :var k = "a_list"
#+HEADER: :var Vs ="a b c d"
#+begin_src sh
  echo lpush $k $Vs   | redis-cli 
#+end_src

#+RESULTS:
: 4

** rpush
#+HEADER: :var k = "a_list"
#+HEADER: :var Vs ="a b c d"
#+begin_src sh
  echo rpush $k $Vs   | redis-cli 
#+end_src

#+RESULTS:
: 8


** lpop
#+HEADER: :var k = "a_list"
#+begin_src sh
  echo lpop $k    | redis-cli 
#+end_src

#+RESULTS:
: d

** rpop
#+HEADER: :var k = "a_list"
#+begin_src sh
  echo rpop $k    | redis-cli 
#+end_src

#+RESULTS:
: d


** rpoplpush
#+HEADER: :var k1 = "from_list"
#+HEADER: :var k2 = "to_list"
#+begin_src sh
  echo rpoplpush $k1 $k2    | redis-cli 
#+end_src

#+RESULTS:



** lrange
#+HEADER: :var k = "a_list"
#+HEADER: :var from = "0"
#+HEADER: :var to = "-1"
#+begin_src sh
  echo lrange $k $from $to    | redis-cli 
#+end_src

#+RESULTS:
| FFG |
| b   |
| a   |
| a   |
| b   |



** lindex
#+HEADER: :var k = "a_list"
#+HEADER: :var i = "0"
#+begin_src sh
  echo lindex $k $i     | redis-cli 
#+end_src

#+RESULTS:
: c


** llen
#+HEADER: :var k = "a_list"
#+begin_src sh
  echo llen $k     | redis-cli 
#+end_src

#+RESULTS:
: 6



** linsert
#+HEADER: :var k = "a_list"
#+HEADER: :var v = "c"
#+HEADER: :var newv = "newv"
#+begin_src sh
  echo linsert $k before $v $newv   | redis-cli 
#+end_src

#+RESULTS:
: 7



** lrem
#+HEADER: :var k = "a_list"
#+HEADER: :var n = "2"
#+HEADER: :var v = "c"
#+begin_src sh
  echo lrem $k $n $v   | redis-cli 
#+end_src

#+RESULTS:
: 2


** lset
#+HEADER: :var k = "a_list"
#+HEADER: :var i = "0"
#+HEADER: :var v = "FFG"
#+begin_src sh
  echo lset $k $i $v   | redis-cli 
#+end_src

#+RESULTS:
: OK




* set oprator

** sadd
#+HEADER: :var k = "a_set"
#+HEADER: :var Vs ="a b c d c"
#+begin_src sh
  echo sadd $k $Vs   | redis-cli 
#+end_src

#+RESULTS:
: 4

** smembers
#+HEADER: :var k = "a_set"
#+begin_src sh
  echo smembers $k | redis-cli 
#+end_src

#+RESULTS:
: d


** smembers
#+HEADER: :var k = "a_set"
#+HEADER: :var v = "c"
#+begin_src sh
  echo sismember $k $v | redis-cli 
#+end_src

#+RESULTS:
: 1


** scard
#+HEADER: :var k = "a_set"
#+begin_src sh
  echo scard $k | redis-cli 
#+end_src

#+RESULTS:
: 4



** srem
#+HEADER: :var k = "a_set"
#+HEADER: :var Vs = "a b c"
#+begin_src sh
  echo srem $k  $Vs| redis-cli 
#+end_src

#+RESULTS:
: 3


** spop
#+HEADER: :var k = "a_set"
#+begin_src sh
  echo spop $k | redis-cli 
#+end_src

#+RESULTS:
: c


** set oprator

*** sinter
#+HEADER: :var k1 = "a_set"
#+HEADER: :var k2 = "anthor_set"
#+begin_src sh
  echo sinter $k1 $k2 | redis-cli 
#+end_src

#+RESULTS:


*** sunion
#+HEADER: :var k1 = "a_set"
#+HEADER: :var k2 = "anthor_set"
#+begin_src sh
  echo sunion $k1 $k2 | redis-cli 
#+end_src

#+RESULTS:
| a |
| b |
| c |
| d |

*** sdiff

#+HEADER: :var k1 = "a_set"
#+HEADER: :var k2 = "anthor_set"
#+begin_src sh
  echo sdiff $k1 $k2 | redis-cli 
#+end_src

#+RESULTS:
| a |
| b |
| c |
| d |







* order-set command
** zadd
#+HEADER: :var k = "a_zset"
#+HEADER: :var SCORE_VALUEs = "1 a 2 b 3 c 2 d"
#+begin_src sh
  echo zadd $k $SCORE_VALUEs | redis-cli 
#+end_src

#+RESULTS:
: 4

** zrange
#+HEADER: :var k = "a_zset"
#+HEADER: :var min_score=0
#+HEADER: :var max_score=3
#+HEADER: :var is_with_scores="WITHSCORES"
#+HEADER: :var limit=""
#+HEADER: :var offset=""
#+HEADER: :var count=""
#+begin_src sh
   echo zrange $k $min_score $max_score $is_with_scores $limit $offset $count| redis-cli
#+end_src

#+RESULTS:
| a |
| 1 |
| b |
| 2 |
| d |
| 2 |
| c |
| 3 |


** zrangebyscore
#+HEADER: :var k = "a_zset"
#+HEADER: :var min_score=0
#+HEADER: :var max_score=3
#+HEADER: :var is_with_scores="WITHSCORES"
#+HEADER: :var limit=""
#+HEADER: :var offset=""
#+HEADER: :var count=""
#+begin_src sh
   echo zrangebyscore $k $min_score $max_score $is_with_scores $limit $offset $count| redis-cli
#+end_src

#+RESULTS:




** zrem
#+HEADER: :var k = "a_zset"
#+HEADER: :var v ="d"
#+begin_src sh
   echo zrem $k $v| redis-cli
#+end_src

#+RESULTS:
: 1


** zcount
#+HEADER: :var k = "a_zset"
#+HEADER: :var min_score = 0
#+HEADER: :var max_score = 3
#+begin_src sh
   echo zcount $k $min_score $max_score| redis-cli
#+end_src

#+RESULTS:
: 3


** zrank
#+HEADER: :var k = "a_zset"
#+HEADER: :var v ="c"
#+begin_src sh
#+begin_src sh
   echo zrank $k $v | redis-cli
#+end_src

#+RESULTS:
: 2



* Hash Command

** hset

#+HEADER: :var k = "a_hash"
#+HEADER: :var f = "a_field"
#+HEADER: :var v = "a_value"
#+begin_src sh
  echo hset $k $f  $v| redis-cli 
#+end_src

#+RESULTS:
: 0

** hget

#+HEADER: :var k = "a_hash"
#+HEADER: :var f = "a_field"
#+begin_src sh
  echo hget $k $f  | redis-cli 
#+end_src

#+RESULTS:
: a_value



** hmset

#+HEADER: :var k = "a_hash"
#+HEADER: :var FVs = "a_field a_value 2f 2v 3f 3v"
#+begin_src sh
  echo hmset $k $FVs  | redis-cli 
#+end_src

#+RESULTS:
: OK


** hexists

#+HEADER: :var k = "a_hash"
#+HEADER: :var f = "3f"
#+begin_src sh
  echo hexists $k $f  | redis-cli 
#+end_src

#+RESULTS:
: 1




** hkeys

#+HEADER: :var k = "a_hash"
#+HEADER: :var f = "3f"
#+begin_src sh
  echo hkeys $k   | redis-cli 
#+end_src

#+RESULTS:
| a_field |
| 2f      |
| 3f      |


** hvals

#+HEADER: :var k = "a_hash"
#+begin_src sh
  echo hvals $k   | redis-cli 
#+end_src

#+RESULTS:
| a_value |
| 2v      |
| 3v      |

** hsetnx

#+HEADER: :var k = "a_hash"
#+HEADER: :var f = "a_field"
#+HEADER: :var v = "a_value"
#+begin_src sh
  echo hsetnx $k  $f $v | redis-cli 
#+end_src

#+RESULTS:
: 0




* publish-subscribe Command

#+HEADER: :var c = "Channel"
#+begin_src sh
  echo subscribe $c | redis-cli 
#+end_src


#+HEADER: :var c = "Channel"
#+HEADER: :var msg = "Hello"
#+begin_src sh
  echo publish  $msg | redis-cli 
#+end_src

* transfacation Command
