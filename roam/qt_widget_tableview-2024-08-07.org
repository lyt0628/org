:PROPERTIES:
:ID:       1d3250dd-e9ab-4bc6-abcb-1b5d275c6b4b
:END:
#+title: pyqt-widget-tableview
#+date: [2024-08-07 三]
#+last_modified:  



* 视图模型分离

#+begin_src python
  import sys
  <<pyqt>>

  class myWidget(QWidget):
      def __init__(self, arg=None):
	  super(myWidget, self).__init__(arg)
	  self.setWindowTitle("QTableView测试")
	  self.resize(500, 300);

	  # （1）创建6行4列标准模型
	  self.model = QStandardItemModel(6, 4)

	  # （2）设置模型表头
	  self.model.setHorizontalHeaderLabels(['课程编号', '课程名', '学时', '学分'])

	  # （3）创建表格视图对象
	  self.tableview = QTableView()
	  self.tableview.move(20, 20)
	  self.tableview.setModel(self.model) 	# 关联QTableView控件和Model

	  # 设置标准模型数据项
	  item11 = QStandardItem('1A001')
	  item12 = QStandardItem('Python程序设计')
	  item13 = QStandardItem('60')
	  item14 = QStandardItem('3')

	  # 将标准模型数据项放到表格视图0行0~3列单元格
	  self.model.setItem(0, 0, item11)
	  self.model.setItem(0, 1, item12)
	  self.model.setItem(0, 2, item13)
	  self.model.setItem(0, 3, item14)

		  #
	  item11 = QStandardItem('1A002')
	  item12 = QStandardItem('鸿蒙系统开发')
	  item13 = QStandardItem('80')
	  item14 = QStandardItem('4')
		  #
	  self.model.setItem(1, 0, item11)
	  self.model.setItem(1, 1, item12)
	  self.model.setItem(1, 2, item13)
	  self.model.setItem(1, 3, item14)

	  #
	  layout = QVBoxLayout()
	  layout.addWidget(self.tableview)
	  self.setLayout(layout)
  
  if __name__ == '__main__':
      app = QApplication(sys.argv)
      w = myWidget()
      w.show()
      sys.exit(app.exec())
#+end_src

#+RESULTS:





* 自定义模型类 python数组 提供数据

#+begin_src python
  import sys
  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      # See below for the nested-list data structure.
	      # .row() indexes into the outer list,
	      # .column() indexes into the sub-list
	      return self._data[index.row()][index.column()]

      def rowCount(self, index):
	  # The length of the outer list.
	  return len(self._data)

      def columnCount(self, index):
	  # The following takes the first sub-list, and returns
	  # the length (only works if all rows are an equal length)
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 1, 3, 3, 7],
	      [9, 1, 5, 3, 8],
	      [2, 1, 5, 3, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None



* 自定义模型类 numpy 提供数据

#+begin_src python
  import sys

  import numpy as np
  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      # Note: self._data[index.row()][index.column()] will also work
	      value = self._data[index.row(), index.column()]
	      return str(value)

      def rowCount(self, index):
	  return self._data.shape[0]

      def columnCount(self, index):
	  return self._data.shape[1]


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = np.array(
	      [
		  [1, 9, 2],
		  [1, 0, -1],
		  [3, 5, 2],
		  [3, 3, 2],
		  [5, 8, 9],
	      ]
	  )

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None



* 自定义模型类 python字典 提供数据

#+begin_src python
  import sys
  <<pyqt>>

  class DictionaryTableModel(QtCore.QAbstractTableModel):
      def __init__(self, data, headers):
	  super(DictionaryTableModel, self).__init__()
	  self._data = data
	  self._headers = headers

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      # Look up the key by header index.
	      column = index.column()
	      column_key = self._headers[column]
	      return self._data[index.row()][column_key]

      def rowCount(self, index):
	  # The length of the outer list.
	  return len(self._data)

      def columnCount(self, index):
	  # The length of our headers.
	  return len(self._headers)

      def headerData(self, section, orientation, role):
	  # section is the index of the column/row.
	  if role == Qt.ItemDataRole.DisplayRole:
	      if orientation == Qt.Orientation.Horizontal:
		  return str(self._headers[section])

	      if orientation == Qt.Orientation.Vertical:
		  return str(section)


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      {"a": 4, "b": 9, "c": 2},
	      {"a": 1, "b": 0, "c": 0},
	      {"a": 3, "b": 5, "c": 0},
	      {"a": 3, "b": 3, "c": 2},
	      {"a": 7, "b": 8, "c": 9},
	  ]

	  headers = ["a", "b", "c"]

	  self.model = DictionaryTableModel(data, headers)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None



* 自定义模型类 pandas 提供数据 自定义行头

#+begin_src python
  import sys

  import pandas as pd
  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      value = self._data.iloc[index.row(), index.column()]
	      return str(value)

      def rowCount(self, index):
	  return self._data.shape[0]

      def columnCount(self, index):
	  return self._data.shape[1]

      def headerData(self, section, orientation, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      if orientation == Qt.Orientation.Horizontal:
		  return str(self._data.columns[section])

	      if orientation == Qt.Orientation.Vertical:
		  return str(self._data.index[section])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = pd.DataFrame(
	      [
		  [1, 9, 2],
		  [1, 0, -1],
		  [3, 5, 2],
		  [3, 3, 2],
		  [5, 8, 9],
	      ],
	      columns=["A", "B", "C"],
	      index=["Row 1", "Row 2", "Row 3", "Row 4", "Row 5"],
	  )

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 个性化表格Cell背景颜色

#+begin_src python
  import sys

  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      # See below for the data structure.
	      return self._data[index.row()][index.column()]

	  if (
	      role == Qt.ItemDataRole.BackgroundRole
	      and index.column() == 1
	  ):
	      # See below for the data structure.
	      return QtGui.QColor("blue")

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 9, 2],
	      [1, -1, -1],
	      [3, 5, -5],
	      [3, 3, 2],
	      [7, 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None



* 个性化表格Cell背景颜色2

#+begin_src python
import sys

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt

# Color range -5 to +5; 0 = light gray
colors = [
    "#67001f",
    "#b2182b",
    "#d6604d",
    "#f4a582",
    "#fddbc7",
    "#f7f7f7",
    "#d1e5f0",
    "#92c5de",
    "#4393c3",
    "#2166ac",
    "#053061",
]


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.ItemDataRole.DisplayRole:
            # See below for the data structure.
            return self._data[index.row()][index.column()]

        elif role == Qt.ItemDataRole.BackgroundRole:
            value = self._data[index.row()][index.column()]
            # Limit to range, + 5 to 0..11 list indexes Python
            color_ix = ((min(max(-5, value), 5) + 5) * -1) + 10
            return QtGui.QBrush(QtGui.QColor(colors[color_ix]))

        # elif role == Qt.ItemDataRole.DecorationRole:
        #   if self._data[index.row()][index.column()] < 0:
        #       return QtGui.QColor('red')

    def rowCount(self, index):
        return len(self._data)

    def columnCount(self, index):
        return len(self._data[0])


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.table = QtWidgets.QTableView()

        data = [
            [4, 9, 2],
            [1, -1, -1],
            [3, 5, -5],
            [3, 3, 2],
            [7, 8, 9],
        ]

        self.model = TableModel(data)
        self.table.setModel(self.model)

        self.setCentralWidget(self.table)
        self.setGeometry(600, 100, 400, 200)


app = QtWidgets.QApplication(sys.argv)
window = MainWindow()
window.show()
app.exec()
#+end_src

#+RESULTS:
: None




* 个性化Cell背景颜色3

#+begin_src python
import sys
from datetime import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt

# Color range -5 to +5; 0 = light gray
COLORS = [
    "#053061",
    "#2166ac",
    "#4393c3",
    "#92c5de",
    "#d1e5f0",
    "#f7f7f7",
    "#fddbc7",
    "#f4a582",
    "#d6604d",
    "#b2182b",
    "#67001f",
]


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data

    # tag::data[]
    def data(self, index, role):
        if role == Qt.ItemDataRole.BackgroundRole:
            value = self._data[index.row()][index.column()]
            if isinstance(value, int) or isinstance(value, float):
                value = int(value)  # Convert to integer for indexing.

                # Limit to range -5 ... +5, then convert to 0..10
                value = max(-5, value)  # values < -5 become -5
                value = min(5, value)  # valaues > +5 become +5
                value = value + 5  # -5 becomes 0, +5 becomes + 10

                return QtGui.QColor(COLORS[value])

        # existing `if role == Qt.ItemDataRole.DisplayRole:` block hidden
        # hidden for clarity.
        # end::data[]

        if role == Qt.ItemDataRole.DisplayRole:
            value = self._data[index.row()][index.column()]
            return value

    def rowCount(self, index):
        return len(self._data)

    def columnCount(self, index):
        return len(self._data[0])


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.table = QtWidgets.QTableView()

        data = [
            [4, 9, 2],
            [1, -1, -1],
            [3, 5, -5],
            [3, 3, 2],
            [7, 8, 9],
        ]

        self.model = TableModel(data)
        self.table.setModel(self.model)

        self.setCentralWidget(self.table)
        self.setGeometry(600, 100, 400, 200)


app = QtWidgets.QApplication(sys.argv)
window = MainWindow()
window.show()
app.exec()
#+end_src

#+RESULTS:
: None



* Cell 装饰图标

#+begin_src python :dir workdir
  import os
  import sys
  from datetime import datetime
  
  <<pyqt>>

  basedir = os.path.dirname(__file__)

  # 11 values; middle = light gray
  COLORS = [
      "#053061",
      "#2166ac",
      "#4393c3",
      "#92c5de",
      "#d1e5f0",
      "#f7f7f7",
      "#fddbc7",
      "#f4a582",
      "#d6604d",
      "#b2182b",
      "#67001f",
  ]
  # colors = ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"]


  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, datetime):
		  return value.strftime("%Y-%m-%d")

	      return value

	  if role == Qt.ItemDataRole.DecorationRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, datetime):
		  return QtGui.QIcon(
		      os.path.join(basedir, "icons/calendar.png")
		  )

	      if isinstance(value, bool):
		  if value:
		      return QtGui.QIcon(
			  os.path.join(basedir, "icons/plus.png")
		      )

		  return QtGui.QIcon(os.path.join(basedir, "icons/cross.png"))

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [True, 9, 2],
	      [1, 0, -1],
	      [3, 5, False],
	      [3, 3, 2],
	      [datetime(2019, 5, 4), 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 根据数据类型进行格式化

#+begin_src python
  import sys
  from datetime import datetime  # <1>

  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      # Get the raw value
	      value = self._data[index.row()][index.column()]

	      # Perform per-type checks and render accordingly.
	      if isinstance(value, datetime):
		  # Render time to YYY-MM-DD.
		  return value.strftime("%Y-%m-%d")

	      if isinstance(value, float):
		  # Render float to 2 dp
		  return "%.2f" % value

	      if isinstance(value, str):
		  # Render strings with quotes
		  return '"%s"' % value

	      # Default (anything not captured above: e.g. int)
	      return value

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])




  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 9, 2],
	      [1, -1, "hello"],
	      [3.023, 5, -5],
	      [3, 3, datetime(2017, 10, 1)],
	      [7.555, 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 格式化 + 改变Cell 背景

#+begin_src python
  import sys
  from datetime import datetime

  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      # tag::data[]
      def data(self, index, role):
	  if (
	      role == Qt.ItemDataRole.BackgroundRole
	      and index.column() == 2
	  ):
	      # See below for the data structure.
	      return QtGui.QColor(Qt.GlobalColor.blue)

	  # existing `if role == Qt.ItemDataRole.DisplayRole:` block hidden
	  # hidden for clarity.

	  # end::data[]

	  if role == Qt.ItemDataRole.DisplayRole:
	      # Get the raw value
	      value = self._data[index.row()][index.column()]

	      # Perform per-type checks and render accordingly.
	      if isinstance(value, datetime):
		  # Render time to YYY-MM-DD.
		  return value.strftime("%Y-%m-%d")

	      if isinstance(value, float):
		  # Render float to 2 dp
		  return "%.2f" % value

	      if isinstance(value, str):
		  # Render strings with quotes
		  return '"%s"' % value

	      # Default (anything not captured above: e.g. int)
	      return value

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 9, 2],
	      [1, -1, "hello"],
	      [3.023, 5, -5],
	      [3, 3, datetime(2017, 10, 1)],
	      [7.555, 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 修改Cell 对齐方式
#+begin_src python
  import sys
  from datetime import datetime

  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      # tag::data[]
      def data(self, index, role):
	  if role == Qt.ItemDataRole.TextAlignmentRole:
	      value = self._data[index.row()][index.column()]

	      if isinstance(value, int) or isinstance(value, float):
		  # Align right, vertical middle.
		  return (
		      Qt.AlignmentFlag.AlignVCenter
		      | Qt.AlignmentFlag.AlignRight
		  )

	  # existing `if role == Qt.ItemDataRole.DisplayRole:` block hidden
	  # hidden for clarity.
	  # end::data[]

	  if (
	      role == Qt.ItemDataRole.BackgroundRole
	      and index.column() == 3
	  ):
	      # See below for the data structure.
	      return QtGui.QColor("blue")

	  if role == Qt.ItemDataRole.DisplayRole:
	      # Get the raw value
	      value = self._data[index.row()][index.column()]

	      # Perform per-type checks and render accordingly.
	      if isinstance(value, datetime):
		  # Render time to YYY-MM-DD.
		  return value.strftime("%Y-%m-%d")

	      if isinstance(value, float):
		  # Render float to 2 dp
		  return "%.2f" % value

	      if isinstance(value, str):
		  # Render strings with quotes
		  return '"%s"' % value

	      # Default (anything not captured above: e.g. int)
	      return value

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 9, 2],
	      [1, -1, "hello"],
	      [3.023, 5, -5],
	      [3, 3, datetime(2017, 10, 1)],
	      [7.555, 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 修改Cell前景色

#+begin_src python
  import sys
  from datetime import datetime

  <<pyqt>>

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      # tag::data[]
      def data(self, index, role):
	  if role == Qt.ItemDataRole.ForegroundRole:
	      value = self._data[index.row()][index.column()]

	      if (
		  isinstance(value, int) or isinstance(value, float)
	      ) and value < 0:
		  return QtGui.QColor("red")

	  # existing `if role == Qt.ItemDataRole.DisplayRole:` block hidden
	  # hidden for clarity.
	  # end::data[]

	  if role == Qt.ItemDataRole.TextAlignmentRole:
	      value = self._data[index.row()][index.column()]

	      if isinstance(value, int) or isinstance(value, float):
		  # Align right, vertical middle.
		  return (
		      Qt.AlignmentFlag.AlignVCenter
		      | Qt.AlignmentFlag.AlignRight
		  )

	  if role == Qt.ItemDataRole.DisplayRole:
	      # Get the raw value
	      value = self._data[index.row()][index.column()]

	      # Perform per-type checks and render accordingly.
	      if isinstance(value, datetime):
		  # Render time to YYY-MM-DD.
		  return value.strftime("%Y-%m-%d")

	      if isinstance(value, float):
		  # Render float to 2 dp
		  return "%.2f" % value

	      if isinstance(value, str):
		  # Render strings with quotes
		  return '"%s"' % value

	      # Default (anything not captured above: e.g. int)
	      return value

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [4, 9, 2],
	      [1, -1, "hello"],
	      [3.023, 5, -5],
	      [3, 3, datetime(2017, 10, 1)],
	      [7.555, 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 装饰图标 + 日期格式化

#+begin_src python :dir workdir
  import os

  import sys
  from datetime import datetime

  <<pyqt>>

  basedir = os.path.dirname(__file__)


  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DisplayRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, datetime):
		  return value.strftime("%Y-%m-%d")

	      return value

	  if role == Qt.ItemDataRole.DecorationRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, datetime):
		  return QtGui.QIcon(
		      os.path.join(basedir, "icons/calendar.png")
		  )

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])




  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [True, 9, 2],
	      [1, 0, -1],
	      [3, 5, False],
	      [3, 3, 2],
	      [datetime(2019, 5, 4), 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


* 空验证

#+begin_src python :dir workdir
import sys
from datetime import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data

    # tag::data[]
    def data(self, index, role):
        if role == Qt.ItemDataRole.DecorationRole:
            value = self._data[index.row()][index.column()]
            if isinstance(value, bool):
                if value:
                    return QtGui.QIcon("icons/plus.png")

                return QtGui.QIcon("icons/cross.png")
        # end::data[]

        if role == Qt.ItemDataRole.DisplayRole:
            value = self._data[index.row()][index.column()]
            if isinstance(value, datetime):
                return value.strftime("%Y-%m-%d")

            return value

    def rowCount(self, index):
        return len(self._data)

    def columnCount(self, index):
        return len(self._data[0])


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.table = QtWidgets.QTableView()

        data = [
            [True, 9, 2],
            [1, 0, -1],
            [3, 5, False],
            [3, 3, 2],
            [datetime(2019, 5, 4), 8, 9],
        ]

        self.model = TableModel(data)
        self.table.setModel(self.model)

        self.setCentralWidget(self.table)
        self.setGeometry(600, 100, 400, 200)


app = QtWidgets.QApplication(sys.argv)
window = MainWindow()
window.show()
app.exec()
#+end_src

#+RESULTS:
: None

* 颜色作为装饰图标

#+begin_src python :dir workdir/icons
import os
import sys
from datetime import datetime

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt

basedir = os.path.dirname(__file__)

COLORS = [
    "#053061",
    "#2166ac",
    "#4393c3",
    "#92c5de",
    "#d1e5f0",
    "#f7f7f7",
    "#fddbc7",
    "#f4a582",
    "#d6604d",
    "#b2182b",
    "#67001f",
]


class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, data):
        super().__init__()
        self._data = data

    # tag::data[]
    def data(self, index, role):
        if role == Qt.ItemDataRole.DecorationRole:
            value = self._data[index.row()][index.column()]

            if isinstance(value, datetime):
                return QtGui.QIcon(
                    os.path.join(basedir, "calendar.png")
                )

            if isinstance(value, bool):
                if value:
                    return QtGui.QIcon(
                        os.path.join(basedir, "plus.png")
                    )

                return QtGui.QIcon(os.path.join(basedir, "cross.png"))

            if isinstance(value, int) or isinstance(value, float):
                value = int(value)

                # Limit to range -5 ... +5, then convert to 0..10
                value = max(-5, value)  # values < -5 become -5
                value = min(5, value)  # valaues > +5 become +5
                value = value + 5  # -5 becomes 0, +5 becomes + 10

                return QtGui.QColor(COLORS[value])
        # end::data[]

        if role == Qt.ItemDataRole.DisplayRole:
            value = self._data[index.row()][index.column()]
            if isinstance(value, datetime):
                return value.strftime("%Y-%m-%d")

            return value

    def rowCount(self, index):
        return len(self._data)

    def columnCount(self, index):
        return len(self._data[0])


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()

        self.table = QtWidgets.QTableView()

        data = [
            [True, 9, 2],
            [1, 0, -1],
            [3, 5, False],
            [3, 3, 2],
            [datetime(2019, 5, 4), 8, 9],
        ]

        self.model = TableModel(data)
        self.table.setModel(self.model)

        self.setCentralWidget(self.table)
        self.setGeometry(600, 100, 400, 200)


app = QtWidgets.QApplication(sys.argv)
window = MainWindow()
window.show()
app.exec()
#+end_src

#+RESULTS:
: None

* 按行设置Cell背景颜色

#+begin_src python :dir workdir
  import os
  import sys
  from datetime import datetime

  <<pyqt>>

  basedir = os.path.dirname(__file__)

  class TableModel(QtCore.QAbstractTableModel):
      def __init__(self, data):
	  super().__init__()
	  self._data = data

	  # Row colors empty by default.
	  self._row_colors = {}

      def data(self, index, role):
	  if role == Qt.ItemDataRole.DecorationRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, bool):
		  if value:
		      return QtGui.QIcon(
			  os.path.join(basedir, "icons/plus.png")
		      )

		  return QtGui.QIcon(os.path.join(basedir, "icons/cross.png"))

	  if role == Qt.ItemDataRole.DisplayRole:
	      value = self._data[index.row()][index.column()]
	      if isinstance(value, datetime):
		  return value.strftime("%Y-%m-%d")

	      return value

	  if role == Qt.ItemDataRole.BackgroundRole:
	      color = self._row_colors.get(
		  index.row()
	      )  # returns None if not in.
	      if color:
		  return QtGui.QColor(color)

      def rowCount(self, index):
	  return len(self._data)

      def columnCount(self, index):
	  return len(self._data[0])

      def set_row_color(self, row, color):
	  self._row_colors[row] = color


  class MainWindow(QtWidgets.QMainWindow):
      def __init__(self):
	  super().__init__()

	  self.table = QtWidgets.QTableView()

	  data = [
	      [True, 9, 2],
	      [1, 0, -1],
	      [3, 5, False],
	      [3, 3, 2],
	      [datetime(2019, 5, 4), 8, 9],
	  ]

	  self.model = TableModel(data)
	  self.model.set_row_color(1, "#b2182b")
	  self.model.set_row_color(3, "#92c5de")
	  self.table.setModel(self.model)

	  self.setCentralWidget(self.table)
	  self.setGeometry(600, 100, 400, 200)


  app = QtWidgets.QApplication(sys.argv)
  window = MainWindow()
  window.show()
  app.exec()
#+end_src

#+RESULTS:
: None


