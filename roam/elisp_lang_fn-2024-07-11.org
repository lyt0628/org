:PROPERTIES:
:ID:       a6334ec2-fd14-4ba9-898c-675ff61d6e3f
:END:
#+title: elisp-lang-fn
#+date: [2024-07-11 四]
#+last_modified: [2024-07-11 四 22:29]

|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| API              | Format                                     | Params                    | Ret | Note                                               |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| <<Define>>       |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| definition       | defun name args body                       | name:symbol               |     |                                                    |
|                  |                                            | args:symbol               |     |                                                    |
|                  |                                            | body:block                |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| alias            | alias name body                            | name:symbol               |     |                                                    |
|                  |                                            | body:block                |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| apply-partially  | apply-partially fn args...                 |                           |     | provide fn with inadquant args as a new fn entry   |
|                  |                                            |                           |     | using alias to give it a name for calling          |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| anonymous        | `(lambda arglist body)                     |                           |     | using function or # as prefix to mark as FN object |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| fset             | fset sym1 sym2                             |                           |     | let sym1 ref to symb2,                             |
|                  |                                            |                           |     | when call sym1 just like calling sym2              |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
|                  |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| <<Call>>         |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| call             | funcall fn args...                         | fn:symbol2FN              |     | call a function with args                          |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| apply            | apply fn args... list                      | fn:symbol2FN              |     | apply a function to every elem in list.            |
|                  |                                            | args:vararg               |     | treat it as first arg, with the rest args          |
|                  |                                            | list:List                 |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| identity         | identity                                   | (x)->x                    |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| ignore           | ignore ags...                              | (&rest)->nil              |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
|                  |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| <<mapping call>> |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| mapcar           | mapcar func sequence                       | (sequence)->List          |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| mapc             | mapc func sequence                         | (sequence)->sequence      |     | no side-effect                                     |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| mapconcat        | mapconcat func sequence &optional separaor | (sequence separator)->str |     | mapcar and concat as string                        |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
|                  |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| <<Meta>>         |                                            |                           |     |                                                    |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| symbol-function  | symbol-function symbol                     | List                      |     | get the func entry of symbol                       |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| fboundp          | foundp symbol                              | bool                      |     | whether symbol is referring to a function          |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
| fmakunbound      | fmakunbound  symbol                        |                           |     | cancel the reference of symbol to function         |
|------------------+--------------------------------------------+---------------------------+-----+----------------------------------------------------|
|                  |                                            |                           |     |                                                    |

* defun	
** Form
*** Basic Form
#+NAME: m-multiply-by-seven 
#+BEGIN_SRC emacs-lisp 
    (defun m-multiply-by-seven (number)
	"
	Return The NUMBER multiplied by seven.
	  Example:
	  `(multiply-by-seven 3) ;21`"
       (* 7 number))
#+END_SRC

#+RESULTS: m-multiply-by-seven
: m-multiply-by-seven


#+NAME: m-call-multiply-by-seven 
#+BEGIN_SRC emacs-lisp
  (m-multiply-by-seven 3)
#+END_SRC

#+RESULTS: m-call-multiply-by-seven
: 21



*** lArgs Form


*** Interactive Fn
**** rcv num arg
#+NAME: m-multipy-by-seven-2
#+BEGIN_SRC emacs-lisp
    (defun m-multiply-by-seven-1 (number)
	"
	  Return The NUMBER multiplied by seven.
	  Example:
  		`(multiply-by-seven 3) ;21`"
       (interactive "p")
       (message "Result is %d" (* 7 number)))
       
#+END_SRC

#+RESULTS: m-multipy-by-seven-2
: m-multiply-by-seven-1


**** rcv region arg
#+NAME: m-get-region
#+BEGIN_SRC emacs-lisp 
  (defun get-region (buffer start end)
    (interactive "r")
    (message "Buffer %s region: %d - %d" buffer start end))
#+END_SRC


* See Also
- [[id:b93b7b0f-ac51-4327-ad32-08bd9ffdaf18][elisp-lang-macro]]
