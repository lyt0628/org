:PROPERTIES:
:ID:       891aa90c-fda0-4b6c-aef8-876a76757401
:END:
#+title: elisp
#+date: [2024-07-11 四]
#+last_modified: [2024-07-11 四 22:28]




#+begin_src emacs-lisp 
(require 'easyob)

(easyob-def "666")

(shell-command "echo 666")

(async-shell-command "echo 666")

(async-shell-command "dir")


(sequencep echo)

(easyob-def echo-555 "echo" "666")


(easyob-call echo-555 "echo" "666")

(echo-555)

(easyob-format-shell-command  "echo" "666")

(macroexp--expand-all
 '(easyob-call echo "echo" "666"))

(macroexp--expand-all
 '(easyob-defsh echo-fff "echo" "666"))
 
(macroexp--expand-all
 '(easyob-defsh-async echo-fff
 "echo" "666"))

 (easyob-defexe "pl")

(org-babel-execute:pl)

(symbol-value easyob-defexe-exesymbol)

 (fmakunbound org-babel-execute:pl)

(echo-fff)

(easyob-def aaa "echo $BODY"  )

(macroexp--expand-all
 '(easyob-def aaa "echo $BODY" ))


 (easyob-def latex
 "pdflatex -shell-escape -output-directory=$FILE_DIR  $FILE  && pdftoppm $FILE_SIMPLE.pdf -png $FILE_SIMPLE"
 :extension ".tex"
 :file "$FILE_SIMPLE-1.png"
 :async nil)

 
 (easyob-def latex "cd $FILE_DIR && pwd"
 :extension ".tex")
#+end_src

#+RESULTS:

#+BEGIN_SRC tex :results file
$a+b$
#+END_SRC

#+RESULTS:
[[file:c:/Users/ASUS/AppData/Local/Temp/babel-Bmejkf//WzBvWz-1.png]]





#+begin_src emacs-lisp

  (let (
	(abc "abc")
	(def "def"))
  
	(message "%s--%s" abc def))

#+end_src

#+RESULTS:
: abc--def


#+begin_src emacs-lisp :tangle yes
  (if (> 3 5)
	(message "t")
  	(message "nil"))
#+end_src


#+begin_src emacs-lisp :tangle yes
  (defun afun ()
      (save-excursion
	    ))
#+end_src


#+begin_src emacs-lisp :tangle yes


  (symbol-name 'lyt-tmp-var)

#+end_src




#+begin_src emacs-lisp :tangle yes
(setq tmp-sym (make-symbol "lyt-tmp-var-666"))

(eq tmp-sym 'tmp-sym)
#+end_src

#+RESULTS:



#+begin_src emacs-lisp :tangle yes
  (gensym)


  (gensym)


  (gensym)
  
#+end_src




#+begin_src emacs-lisp :tangle yes

  (defconst tmp-arr (make-vector 1024 0))

  (setq sym (intern "tmp-arr"))

  (eq sym 'tmp-arr)


  (setq sym (intern "tmp-arr" tmp-arr))

  (eq sym 'tmp-arr)

#+end_src


#+begin_src emacs-lisp
  (defvar tmp-arr-666)

  (intern-soft "tmp-arr-666")

  
  (intern-soft "undefined-var-1")


#+end_src




#+begin_src emacs-lisp :tangle yes
  obarray
#+end_src




#+begin_src emacs-lisp :tangle yes
  (setq count 0)

  (defun count-syms (s)
    (setq count (1+ count)))

  (mapatoms 'count-syms)

  count

#+end_src


#+begin_src emacs-lisp :tangle yes
  (setq syms '())

  (defun print-syms (s)
     (setq syms (cons syms (symbol-name s))))


  (mapatoms 'print-syms)

  syms
  
#+end_src



#+begin_src emacs-lisp
  (unintern "tmp-arr-666")

#+end_src
