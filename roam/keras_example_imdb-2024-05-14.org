:PROPERTIES:
:ID:       3aeca188-c73c-4593-9fde-c199cc10e0e7
:END:
#+title: keras-example-imdb
#+date: [2024-05-14 二]
#+last_modified: [2024-05-16 四 17:16]





* 导入数据集
#+begin_src python :session imdb
  
  from tensorflow.keras.datasets import imdb

  (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000, path="/home/lyt0628/download/imdb.npz")
#+end_src

#+RESULTS:


* 观察数据集

#+begin_src python :session imdb
  train_data[0]

#+end_src

#+RESULTS:
| 1 | 14 | 22 | 16 | 43 | 530 | 973 | 1622 | 1385 | 65 | 458 | 4468 | 66 | 3941 | 4 | 173 | 36 | 256 | 5 | 25 | 100 | 43 | 838 | 112 | 50 | 670 | 2 | 9 | 35 | 480 | 284 | 5 | 150 | 4 | 172 | 112 | 167 | 2 | 336 | 385 | 39 | 4 | 172 | 4536 | 1111 | 17 | 546 | 38 | 13 | 447 | 4 | 192 | 50 | 16 | 6 | 147 | 2025 | 19 | 14 | 22 | 4 | 1920 | 4613 | 469 | 4 | 22 | 71 | 87 | 12 | 16 | 43 | 530 | 38 | 76 | 15 | 13 | 1247 | 4 | 22 | 17 | 515 | 17 | 12 | 16 | 626 | 18 | 2 | 5 | 62 | 386 | 12 | 8 | 316 | 8 | 106 | 5 | 4 | 2223 | 5244 | 16 | 480 | 66 | 3785 | 33 | 4 | 130 | 12 | 16 | 38 | 619 | 5 | 25 | 124 | 51 | 36 | 135 | 48 | 25 | 1415 | 33 | 6 | 22 | 12 | 215 | 28 | 77 | 52 | 5 | 14 | 407 | 16 | 82 | 2 | 8 | 4 | 107 | 117 | 5952 | 15 | 256 | 4 | 2 | 7 | 3766 | 5 | 723 | 36 | 71 | 43 | 530 | 476 | 26 | 400 | 317 | 46 | 7 | 4 | 2 | 1029 | 13 | 104 | 88 | 4 | 381 | 15 | 297 | 98 | 32 | 2071 | 56 | 26 | 141 | 6 | 194 | 7486 | 18 | 4 | 226 | 22 | 21 | 134 | 476 | 26 | 480 | 5 | 144 | 30 | 5535 | 18 | 51 | 36 | 28 | 224 | 92 | 25 | 104 | 4 | 226 | 65 | 16 | 38 | 1334 | 88 | 12 | 16 | 283 | 5 | 16 | 4472 | 113 | 103 | 32 | 15 | 16 | 5345 | 19 | 178 | 32 |




#+begin_src python :session imdb
  train_labels[0]

#+end_src

#+RESULTS:
: 1



总共有 0-9999 ，10000 个词 
#+begin_src python :session imdb
  max([max(sequence) for sequence in train_data])

#+end_src

#+RESULTS:
: 9999




* 反转 k-v 方便从文本中查找 下标

#+begin_src python :session imdb
  word_index = imdb.get_word_index()

  reverse_word_index = dict(
      [(value, key) for (key, value) in word_index.items()])
  
  decoded_review = " ".join(
      [reverse_word_index.get(i - 3, "?") for i in train_data[0]])

#+end_src

#+RESULTS:



* One-Hot编码


#+begin_src python :session imdb
  import numpy as np

  def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
      for j in sequence:
        results[i, j] = 1.
    return results
  
  x_train = vectorize_sequences(train_data)
  x_test = vectorize_sequences(test_data)

  x_train[0]
#+end_src

#+RESULTS:
| 0 | 1 | 1 | ... | 0 | 0 | 0 |



#+begin_src python :session imdb
  y_train = np.asarray(train_labels).astype("float32")
  y_test = np.asarray(test_labels).astype("float32")

  y_train.dtype
#+end_src

#+RESULTS:
: float32



* 构建神经网络


#+begin_src python :session imdb
  from tensorflow import keras
  from tensorflow.keras import layers

  model = keras.Sequential([
      layers.Dense(16, activation="relu"),
      layers.Dense(16, activation="relu"),
      layers.Dense(1, activation="sigmoid")
  ])

  model
#+end_src

#+RESULTS:
: <Sequential name=sequential_2, built=False>


#+begin_src python :session imdb
  model.compile(optimizer="rmsprop",
		loss="binary_crossentropy",
		metrics=["accuracy"])

  model
#+end_src

#+RESULTS:
: <Sequential name=sequential_2, built=False>



* 划分验证集

#+begin_src python :session imdb
  x_val = x_train[:10000]
  partial_x_train = x_train[10000:]
  y_val = y_train[:10000]
  partial_y_train = y_train[10000:]

  partial_x_train.shape
#+end_src

#+RESULTS:
| 15000 | 10000 |



* 训练模型

#+begin_src python :session imdb :results output
  history = model.fit(partial_x_train,
		      partial_y_train,
		      epochs=20,
		      batch_size=512,
		      validation_data=(x_val, y_val))

#+end_src

#+RESULTS:
#+begin_example
Epoch 1/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m10s[0m 378ms/step - accuracy: 0.5449 - loss: 0.6882[1m10/30[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.5626 - loss: 0.6673   [1m23/30[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.6348 - loss: 0.6319[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 16ms/step - accuracy: 0.6644 - loss: 0.6119 - val_accuracy: 0.8317 - val_loss: 0.4298
Epoch 2/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 53ms/step - accuracy: 0.8770 - loss: 0.3767[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.8852 - loss: 0.3707 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.8886 - loss: 0.3585[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.8888 - loss: 0.3550 - val_accuracy: 0.8772 - val_loss: 0.3201
Epoch 3/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 53ms/step - accuracy: 0.9199 - loss: 0.2439[1m10/30[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9215 - loss: 0.2524 [1m24/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9174 - loss: 0.2542[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9165 - loss: 0.2539 - val_accuracy: 0.8794 - val_loss: 0.3017
Epoch 4/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 54ms/step - accuracy: 0.9336 - loss: 0.2151[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9309 - loss: 0.2096 [1m25/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9318 - loss: 0.2068[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9317 - loss: 0.2063 - val_accuracy: 0.8887 - val_loss: 0.2760
Epoch 5/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 54ms/step - accuracy: 0.9492 - loss: 0.1607[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9461 - loss: 0.1684 [1m25/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9452 - loss: 0.1699[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9450 - loss: 0.1697 - val_accuracy: 0.8867 - val_loss: 0.2809
Epoch 6/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 52ms/step - accuracy: 0.9473 - loss: 0.1405[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9518 - loss: 0.1461 [1m24/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9526 - loss: 0.1458[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9531 - loss: 0.1451 - val_accuracy: 0.8787 - val_loss: 0.3013
Epoch 7/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 49ms/step - accuracy: 0.9590 - loss: 0.1115[1m10/30[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9627 - loss: 0.1142 [1m23/30[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9625 - loss: 0.1170[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9618 - loss: 0.1185 - val_accuracy: 0.8791 - val_loss: 0.3045
Epoch 8/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 54ms/step - accuracy: 0.9668 - loss: 0.1091[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9691 - loss: 0.1055 [1m24/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9690 - loss: 0.1053[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9683 - loss: 0.1058 - val_accuracy: 0.8814 - val_loss: 0.3058
Epoch 9/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 46ms/step - accuracy: 0.9824 - loss: 0.0776[1m 9/30[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9804 - loss: 0.0818 [1m22/30[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9787 - loss: 0.0849[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9778 - loss: 0.0863 - val_accuracy: 0.8825 - val_loss: 0.3262
Epoch 10/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 52ms/step - accuracy: 0.9766 - loss: 0.0749[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9813 - loss: 0.0726 [1m25/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9810 - loss: 0.0738[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9804 - loss: 0.0748 - val_accuracy: 0.8792 - val_loss: 0.3399
Epoch 11/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 53ms/step - accuracy: 0.9922 - loss: 0.0545[1m10/30[0m [32m━━━━━━[0m[37m━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9910 - loss: 0.0568 [1m22/30[0m [32m━━━━━━━━━━━━━━[0m[37m━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9890 - loss: 0.0587[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 8ms/step - accuracy: 0.9873 - loss: 0.0607 - val_accuracy: 0.8804 - val_loss: 0.3589
Epoch 12/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 52ms/step - accuracy: 0.9922 - loss: 0.0521[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9916 - loss: 0.0484 [1m24/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9894 - loss: 0.0514[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9887 - loss: 0.0527 - val_accuracy: 0.8769 - val_loss: 0.3809
Epoch 13/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 50ms/step - accuracy: 0.9922 - loss: 0.0367[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9905 - loss: 0.0417 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9901 - loss: 0.0438[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9898 - loss: 0.0446 - val_accuracy: 0.8762 - val_loss: 0.4026
Epoch 14/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 51ms/step - accuracy: 0.9961 - loss: 0.0381[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9950 - loss: 0.0347 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9936 - loss: 0.0362[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9932 - loss: 0.0368 - val_accuracy: 0.8683 - val_loss: 0.4598
Epoch 15/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 50ms/step - accuracy: 0.9883 - loss: 0.0437[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9937 - loss: 0.0328 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9939 - loss: 0.0325[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9938 - loss: 0.0329 - val_accuracy: 0.8742 - val_loss: 0.4452
Epoch 16/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 49ms/step - accuracy: 0.9922 - loss: 0.0266[1m12/30[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9962 - loss: 0.0237 [1m27/30[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m0s[0m 4ms/step - accuracy: 0.9961 - loss: 0.0262[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9961 - loss: 0.0264 - val_accuracy: 0.8728 - val_loss: 0.4701
Epoch 17/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 50ms/step - accuracy: 1.0000 - loss: 0.0177[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9991 - loss: 0.0203 [1m25/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9974 - loss: 0.0236[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9970 - loss: 0.0243 - val_accuracy: 0.8701 - val_loss: 0.4910
Epoch 18/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 50ms/step - accuracy: 1.0000 - loss: 0.0166[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9994 - loss: 0.0157 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9987 - loss: 0.0173[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9987 - loss: 0.0176 - val_accuracy: 0.8644 - val_loss: 0.5380
Epoch 19/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 51ms/step - accuracy: 1.0000 - loss: 0.0147[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9994 - loss: 0.0152 [1m26/30[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9986 - loss: 0.0168[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9985 - loss: 0.0171 - val_accuracy: 0.8702 - val_loss: 0.5379
Epoch 20/20
[1m 1/30[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m1s[0m 51ms/step - accuracy: 1.0000 - loss: 0.0098[1m11/30[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9997 - loss: 0.0107 [1m25/30[0m [32m━━━━━━━━━━━━━━━━[0m[37m━━━━[0m [1m0s[0m 4ms/step - accuracy: 0.9992 - loss: 0.0122[1m30/30[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 7ms/step - accuracy: 0.9987 - loss: 0.0133 - val_accuracy: 0.8689 - val_loss: 0.5618
#+end_example


#+begin_src python :session imdb

  history_dict = history.history
  history_dict.keys()
#+end_src

#+RESULTS:
: dict_keys(['accuracy', 'loss', 'val_accuracy', 'val_loss'])


* 测试一下
#+begin_src python :session imdb
  results = model.evaluate(x_test, y_test)
  results 
#+end_src

#+RESULTS:
| 0.6112262606620789 | 0.8579599857330322 |


#+begin_src python :session imdb
  model.predict(x_test)
  
#+end_src

#+RESULTS:
| (0.01522467) | (0.9999974) | (0.6375112) | ... | (0.00108705) | (0.03072366) | (0.9818859) |

* 可视化

#+begin_src python :session imdb 
  import matplotlib.pyplot as plt

  plt.clf()
  acc = history_dict["accuracy"]
  val_acc = history_dict["val_accuracy"]
  plt.plot(epochs, acc, "bo", label="Training acc")
  plt.plot(epochs, val_acc, "b", label="Validation acc")
  plt.title("Training and validation accuracy")
  plt.xlabel("Epochs")
  plt.ylabel("Accuracy")
  plt.legend()
  plt.show()

#+end_src

#+RESULTS:


* 降低训练次数, 重新训练

#+begin_src python :session imdb :results output
  model = keras.Sequential([
      layers.Dense(16, activation="relu"),
      layers.Dense(16, activation="relu"),
      layers.Dense(1, activation="sigmoid")
  ])
  model.compile(optimizer="rmsprop",
		loss="binary_crossentropy",
		metrics=["accuracy"])
  model.fit(x_train, y_train, epochs=4, batch_size=512)
  results = model.evaluate(x_test, y_test)

#+end_src

#+RESULTS:
: Epoch 1/4
: [1m 1/49[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m18s[0m 387ms/step - accuracy: 0.4980 - loss: 0.6960[1m11/49[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.5965 - loss: 0.6780   [1m20/49[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.6471 - loss: 0.6561[1m30/49[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.6824 - loss: 0.6328[1m43/49[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 5ms/step - accuracy: 0.7132 - loss: 0.6049[1m49/49[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 5ms/step - accuracy: 0.7256 - loss: 0.5914
: Epoch 2/4
: [1m 1/49[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m2s[0m 53ms/step - accuracy: 0.9004 - loss: 0.3308[1m10/49[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.8939 - loss: 0.3318 [1m20/49[0m [32m━━━━━━━━[0m[37m━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.8948 - loss: 0.3237[1m30/49[0m [32m━━━━━━━━━━━━[0m[37m━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.8948 - loss: 0.3179[1m42/49[0m [32m━━━━━━━━━━━━━━━━━[0m[37m━━━[0m [1m0s[0m 5ms/step - accuracy: 0.8950 - loss: 0.3125[1m49/49[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 5ms/step - accuracy: 0.8953 - loss: 0.3092
: Epoch 3/4
: [1m 1/49[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m2s[0m 54ms/step - accuracy: 0.9258 - loss: 0.2144[1m10/49[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9234 - loss: 0.2213 [1m19/49[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9224 - loss: 0.2226[1m28/49[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9217 - loss: 0.2230[1m39/49[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9211 - loss: 0.2229[1m49/49[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 5ms/step - accuracy: 0.9205 - loss: 0.2228
: Epoch 4/4
: [1m 1/49[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m2s[0m 54ms/step - accuracy: 0.9512 - loss: 0.1952[1m10/49[0m [32m━━━━[0m[37m━━━━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9447 - loss: 0.1856 [1m19/49[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9406 - loss: 0.1848[1m28/49[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m0s[0m 6ms/step - accuracy: 0.9383 - loss: 0.1854[1m39/49[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m0s[0m 5ms/step - accuracy: 0.9368 - loss: 0.1856[1m49/49[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m0s[0m 5ms/step - accuracy: 0.9359 - loss: 0.1859
: [1m  1/782[0m [37m━━━━━━━━━━━━━━━━━━━━[0m [1m49s[0m 63ms/step - accuracy: 0.8438 - loss: 0.3137[1m 73/782[0m [32m━[0m[37m━━━━━━━━━━━━━━━━━━━[0m [1m0s[0m 698us/step - accuracy: 0.8882 - loss: 0.2663[1m155/782[0m [32m━━━[0m[37m━━━━━━━━━━━━━━━━━[0m [1m0s[0m 654us/step - accuracy: 0.8883 - loss: 0.2744[1m230/782[0m [32m━━━━━[0m[37m━━━━━━━━━━━━━━━[0m [1m0s[0m 659us/step - accuracy: 0.8883 - loss: 0.2768[1m299/782[0m [32m━━━━━━━[0m[37m━━━━━━━━━━━━━[0m [1m0s[0m 675us/step - accuracy: 0.8880 - loss: 0.2781[1m384/782[0m [32m━━━━━━━━━[0m[37m━━━━━━━━━━━[0m [1m0s[0m 656us/step - accuracy: 0.8872 - loss: 0.2805[1m465/782[0m [32m━━━━━━━━━━━[0m[37m━━━━━━━━━[0m [1m0s[0m 650us/step - accuracy: 0.8867 - loss: 0.2819[1m546/782[0m [32m━━━━━━━━━━━━━[0m[37m━━━━━━━[0m [1m0s[0m 646us/step - accuracy: 0.8863 - loss: 0.2829[1m625/782[0m [32m━━━━━━━━━━━━━━━[0m[37m━━━━━[0m [1m0s[0m 644us/step - accuracy: 0.8864 - loss: 0.2831[1m708/782[0m [32m━━━━━━━━━━━━━━━━━━[0m[37m━━[0m [1m0s[0m 640us/step - accuracy: 0.8865 - loss: 0.2831[1m782/782[0m [32m━━━━━━━━━━━━━━━━━━━━[0m[37m[0m [1m1s[0m 639us/step - accuracy: 0.8866 - loss: 0.2831



#+begin_src python :session imdb
  results
  
#+end_src

#+RESULTS:
| 0.2822219431400299 | 0.8873999714851379 |





* 测试

#+begin_src python :session imdb
  model.predict(x_test)

#+end_src

#+RESULTS:
| (0.18466848) | (0.99971306) | (0.7713676) | ... | (0.08978788) | (0.06179793) | (0.62000686) |
