

#+NAME: linux
#+BEGIN_SRC C

#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h>
#include <iso646.h>
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <poll.h>
#include <pthread.h>
#include <semaphore.h>
#include <fcntl.h>
#include <signal.h>
#include <stdarg.h>
#include <termios.h>
#include <utime.h>
#include <unistd.h>
#include <netdb.h>
#include <syslog.h>		/* for syslog() */
#include <netinet/in.h>
#include <arpa/inet.h>

#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/utsname.h>
#include <sys/ioctl.h>
#include <sys/uio.h>		/* for writev() */
#include <netinet/tcp.h>		/* for TCP_xxx defines */
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/msg.h>
#include <sys/types.h>	/* basic system data types */
#include <sys/socket.h>	/* basic socket definitions */
#include <sys/time.h>	/* timeval{} for select() */

#+END_SRC

#+RESULTS: linux


#+NAME: m_def
#+BEGIN_SRC C
  #define m_bool int
  #define TRUE 1
  #define FALSE 0

  typedef void	Sigfunc(int);	/* for signal handlers */
  #define WAITPID_ANY_CHLD -1

  #define IPC_WAIT 0
  #define MSG_ANY_TYPE 0

  #define SA struct sockaddr
  

#+END_SRC



#+NAME: sig_chld_wait
#+BEGIN_SRC C

void
sig_chld_wait(int signo)
{
	pid_t	pid;
	int	stat;

	pid = wait(&stat);
	printf("child %d terminated\n", pid);
	return;
}

#+END_SRC


#+NAME: sig_chld
#+BEGIN_SRC C 

void
sig_chld(int signo)
{
	pid_t	pid;
	int	stat;

	while ( (pid = waitpid(-1, &stat, WNOHANG)) > 0)
		printf("child %d terminated\n", pid);
	return;
}
#+END_SRC


#+NAME: echo_srv
#+BEGIN_SRC C 

  void
  echo_srv(int sockfd)
  {
	  ssize_t	n;
	  char	buf[1024];

  again:
	  while ( (n = read(sockfd, buf, sizeof(buf))) > 0){

		if(strncmp(buf, "end", 3) == 0) break;
		write(sockfd, buf, n);
	  }

	  if (n < 0){
		if(errno == EINTR)
		  goto again;
		else
		  perror("str_echo: read error");
	    }
  }

#+END_SRC

